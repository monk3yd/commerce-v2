from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.contrib.sessions.models import Session
from django.db import models
from django.forms import ModelForm


from datetime import datetime as dt


# MODELS
category_choices = [
    ('Electronics', 'Electronics'),
    ('Home', 'Home'),
    ('Toys', "Toys"),
    ('Fashion', "Fashion")
]


# Auction Listings
class ListingItem(models.Model):
    # Form
    title = models.CharField(max_length=50)
    description = models.CharField(max_length=250)
    starting_bid = models.FloatField()
    img_url = models.URLField(blank=True)  # models.ImageField()
    category = models.CharField(max_length=50, choices=category_choices)

    # Auto-generated when submitted
    starting_date = models.DateTimeField(auto_now=True)
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )  # ForeigKey to User.

    def __str__(self):
        return f"{self.title}"


class User(AbstractUser):
    watchlist = models.ManyToManyField(
        ListingItem,
        blank=True,
        related_name="watchlist"
    )

    def __str__(self):
        return self.username


# TODO - Bids
# class Bid(models.Model):
#     bid = models.FloatField()
#     author = models.ForeignKey(
#         'User',
#         on_delete=models.CASCADE,
#     ) # ForeigKey to User
#     date = models.DateTimeField()


# Comments on auction listings
# class ListingComment(models.Model):
#     comment = models.CharField()
#     author = models.CharField()  # ForeigKey to User
#     date = models.

# Eventually tryout the MnaytoManyField path  https://stackoverflow.com/questions/29629484/django-link-multiple-tables
# class WatchList(models.Model):
    # id - autogenerated
    # user_id
    # user = models.ForeignKey(
    #     settings.AUTH_USER_MODEL,
    #     on_delete=models.CASCADE,
    # )  # ForeigKey to User

    # # item_id
    # item = models.ForeignKey(
    #     ListingItem,
    #     on_delete=models.CASCADE,
    # )  # ForeigKey to ListingItem

    # class Meta:
    #     unique_together = ('user', 'item')

    # def __str__(self):
    #     return f"{self.item}"
        # return f"User ID: {self.user}, Item ID: {self.item}"

    def __str__(self):
        return f"{self.item.title}"


# FORMS
class AddListingItemForm(ModelForm):  # Model form from db Model
    class Meta:
        model = ListingItem
        fields = [  # fields = '__all__'
            'title',
            'description',
            'starting_bid',
            'img_url',
            'category'
        ]

        labels = {
            # Name of field : label Text
            'title': 'Title',
            'description': 'Description',
            'starting_bid': 'Starting Bid',
            'img_url': 'Image URL',
            'category': 'Category'
        }


# class AddWatchListForm(ModelForm):
#     class Meta:
#         model = WatchList
#         fields = '__all__'
